"asm"							{ std::cout << "ASM" << std::endl; }
"auto"							{ std::cout << "AUTO" << std::endl; }
"bool"							{ std::cout << "BOOL" << std::endl; }
"break"							{ std::cout << "BREAK" << std::endl; }
"case"							{ std::cout << "CASE" << std::endl; }
"catch"							{ std::cout << "CATCH" << std::endl; }
"char"							{ std::cout << "CHAR" << std::endl; }
"class"							{ std::cout << "CLASS" << std::endl; }
"const"							{ std::cout << "CONST" << std::endl; }
"const_cast"					{ std::cout << "CONST_CAST" << std::endl; }
"continue"						{ std::cout << "CONTINUE" << std::endl; }
"default"						{ std::cout << "DEFAULT" << std::endl; }
"delete"						{ std::cout << "DELETE" << std::endl; }
"do"							{ std::cout << "DO" << std::endl; }
"double"						{ std::cout << "DOUBLE" << std::endl; }
"dynamic_cast"					{ std::cout << "DYNAMIC_CAST" << std::endl; }
"else"							{ std::cout << "ELSE" << std::endl; }
"enum"							{ std::cout << "ENUM" << std::endl; }
"explicit"						{ std::cout << "EXPLICIT" << std::endl; }
"export"						{ std::cout << "EXPORT" << std::endl; }
"extern"						{ std::cout << "EXTERN" << std::endl; }
"false"							{ std::cout << "FALSE" << std::endl; }
"float"							{ std::cout << "FLOAT" << std::endl; }
"for"							{ std::cout << "FOR" << std::endl; }
"friend"						{ std::cout << "FRIEND" << std::endl; }
"goto"							{ std::cout << "GOTO" << std::endl; }
"if"							{ std::cout << "IF" << std::endl; }
"inline"						{ std::cout << "INLINE" << std::endl; }
"int"							{ std::cout << "INT" << std::endl; }
"long"							{ std::cout << "LONG" << std::endl; }
"mutable"						{ std::cout << "MUTABLE" << std::endl; }
"namespace"						{ std::cout << "NAMESPACE" << std::endl; }
"new"							{ std::cout << "NEW" << std::endl; }
"operator"						{ std::cout << "OPERATOR" << std::endl; }
"private"						{ std::cout << "PRIVATE" << std::endl; }
"protected"						{ std::cout << "PROTECTED" << std::endl; }
"public"						{ std::cout << "PUBLIC" << std::endl; }
"register"						{ std::cout << "REGISTER" << std::endl; }
"reinterpret_cast"				{ std::cout << "REINTERPRET_CAST" << std::endl; }
"return"						{ std::cout << "RETURN" << std::endl; }
"short"							{ std::cout << "SHORT" << std::endl; }
"signed"						{ std::cout << "SIGNED" << std::endl; }
"sizeof"						{ std::cout << "SIZEOF" << std::endl; }
"static"						{ std::cout << "STATIC" << std::endl; }
"static_cast"					{ std::cout << "STATIC_CAST" << std::endl; }
"struct"						{ std::cout << "STRUCT" << std::endl; }
"switch"						{ std::cout << "SWITCH" << std::endl; }
"template"						{ std::cout << "TEMPLATE" << std::endl; }
"this"							{ std::cout << "THIS" << std::endl; }
"throw"							{ std::cout << "THROW" << std::endl; }
"true"							{ std::cout << "TRUE" << std::endl; }
"try"							{ std::cout << "TRY" << std::endl; }
"typedef"						{ std::cout << "TYPEDEF" << std::endl; }
"typeid"						{ std::cout << "TYPEID" << std::endl; }
"typename"						{ std::cout << "TYPENAME" << std::endl; }
"union"							{ std::cout << "UNION" << std::endl; }
"unsigned"						{ std::cout << "UNSIGNED" << std::endl; }
"using"							{ std::cout << "USING" << std::endl; }
"virtual"						{ std::cout << "VIRTUAL" << std::endl; }
"void"							{ std::cout << "VOID" << std::endl; }
"volatile"						{ std::cout << "VOLATILE" << std::endl; }
"wchar_t"						{ std::cout << "WCHAR_T" << std::endl; }
"while"							{ std::cout << "WHILE" << std::endl; }

"::"							{ std::cout << "SCOPE" << std::endl; }
"..."							{ std::cout << "ELLIPSIS" << std::endl; }
"<<"							{ std::cout << "SHL" << std::endl; }
">>"							{ std::cout << "SHR" << std::endl; }
"=="							{ std::cout << "EQ" << std::endl; }
"!="							{ std::cout << "NE" << std::endl; }
"<="							{ std::cout << "LE" << std::endl; }
">="							{ std::cout << "GE" << std::endl; }
"&&"							{ std::cout << "LOG_AND" << std::endl; }
"||"							{ std::cout << "LOG_OR" << std::endl; }
"++"							{ std::cout << "INC" << std::endl; }
"--"							{ std::cout << "DEC" << std::endl; }
"->*"							{ std::cout << "ARROW_STAR" << std::endl; }
"->"							{ std::cout << "ARROW" << std::endl; }
".*"							{ std::cout << "DOT_STAR" << std::endl; }
"+="							{ std::cout << "ASS_ADD" << std::endl; }
"-="							{ std::cout << "ASS_SUB" << std::endl; }
"*="							{ std::cout << "ASS_MUL" << std::endl; }
"/="							{ std::cout << "ASS_DIV" << std::endl; }
"%="							{ std::cout << "ASS_MOD" << std::endl; }
"^="							{ std::cout << "ASS_XOR" << std::endl; }
"&="							{ std::cout << "ASS_AND" << std::endl; }
"|="							{ std::cout << "ASS_OR" << std::endl; }
">>="							{ std::cout << "ASS_SHR" << std::endl; }
"<<="							{ std::cout << "ASS_SHL" << std::endl; }

{pp_number}						{ std::cout << "NUMBER" << std::endl; }

{identifier}					{ std::cout << yytext << std::endl; }
                                  
{escape_sequence}				| 
{universal_character_name}		{ std::cout << yytext << std::endl; }

\n								| 
{ws}+							{ }
